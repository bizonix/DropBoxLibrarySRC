#Embedded file name: dropbox/sync_engine_file_system/hfsplus_compare.py
HFSPLUS_CI_IGNORED = u'\u200c\u200d\u200e\u200f\u202a\u202b\u202c\u202d\u202e\u206a\u206b\u206c\u206d\u206e\u206f\ufeff'
HFSPLUS_CI_EQUIVALENTS = (HFSPLUS_CI_IGNORED,
 u'aA',
 u'bB',
 u'cC',
 u'dD',
 u'eE',
 u'fF',
 u'gG',
 u'hH',
 u'iI',
 u'jJ',
 u'kK',
 u'lL',
 u'mM',
 u'nN',
 u'oO',
 u'pP',
 u'qQ',
 u'rR',
 u'sS',
 u'tT',
 u'uU',
 u'vV',
 u'wW',
 u'xX',
 u'yY',
 u'zZ',
 u'\xe6\xc6',
 u'\xf0\xd0',
 u'\xf8\xd8',
 u'\xfe\xde',
 u'\u0111\u0110',
 u'\u0127\u0126',
 u'\u0133\u0132',
 u'\u0140\u013f',
 u'\u0142\u0141',
 u'\u014b\u014a',
 u'\u0153\u0152',
 u'\u0167\u0166',
 u'\u0183\u0182',
 u'\u0185\u0184',
 u'\u0188\u0187',
 u'\u018c\u018b',
 u'\u0192\u0191',
 u'\u0199\u0198',
 u'\u01a3\u01a2',
 u'\u01a5\u01a4',
 u'\u01a8\u01a7',
 u'\u01ad\u01ac',
 u'\u01b4\u01b3',
 u'\u01b6\u01b5',
 u'\u01b9\u01b8',
 u'\u01bd\u01bc',
 u'\u01c6\u01c4\u01c5',
 u'\u01c9\u01c7\u01c8',
 u'\u01cc\u01ca\u01cb',
 u'\u01dd\u018e',
 u'\u01e5\u01e4',
 u'\u01f3\u01f1\u01f2',
 u'\u0253\u0181',
 u'\u0254\u0186',
 u'\u0256\u0189',
 u'\u0257\u018a',
 u'\u0259\u018f',
 u'\u025b\u0190',
 u'\u0260\u0193',
 u'\u0263\u0194',
 u'\u0268\u0197',
 u'\u0269\u0196',
 u'\u026f\u019c',
 u'\u0272\u019d',
 u'\u0275\u019f',
 u'\u0283\u01a9',
 u'\u0288\u01ae',
 u'\u028a\u01b1',
 u'\u028b\u01b2',
 u'\u0292\u01b7',
 u'\u03b1\u0391',
 u'\u03b2\u0392',
 u'\u03b3\u0393',
 u'\u03b4\u0394',
 u'\u03b5\u0395',
 u'\u03b6\u0396',
 u'\u03b7\u0397',
 u'\u03b8\u0398',
 u'\u03b9\u0399',
 u'\u03ba\u039a',
 u'\u03bb\u039b',
 u'\u03bc\u039c',
 u'\u03bd\u039d',
 u'\u03be\u039e',
 u'\u03bf\u039f',
 u'\u03c0\u03a0',
 u'\u03c1\u03a1',
 u'\u03c3\u03a3',
 u'\u03c4\u03a4',
 u'\u03c5\u03a5',
 u'\u03c6\u03a6',
 u'\u03c7\u03a7',
 u'\u03c8\u03a8',
 u'\u03c9\u03a9',
 u'\u03e3\u03e2',
 u'\u03e5\u03e4',
 u'\u03e7\u03e6',
 u'\u03e9\u03e8',
 u'\u03eb\u03ea',
 u'\u03ed\u03ec',
 u'\u03ef\u03ee',
 u'\u0430\u0410',
 u'\u0431\u0411',
 u'\u0432\u0412',
 u'\u0433\u0413',
 u'\u0434\u0414',
 u'\u0435\u0415',
 u'\u0436\u0416',
 u'\u0437\u0417',
 u'\u0438\u0418',
 u'\u043a\u041a',
 u'\u043b\u041b',
 u'\u043c\u041c',
 u'\u043d\u041d',
 u'\u043e\u041e',
 u'\u043f\u041f',
 u'\u0440\u0420',
 u'\u0441\u0421',
 u'\u0442\u0422',
 u'\u0443\u0423',
 u'\u0444\u0424',
 u'\u0445\u0425',
 u'\u0446\u0426',
 u'\u0447\u0427',
 u'\u0448\u0428',
 u'\u0449\u0429',
 u'\u044a\u042a',
 u'\u044b\u042b',
 u'\u044c\u042c',
 u'\u044d\u042d',
 u'\u044e\u042e',
 u'\u044f\u042f',
 u'\u0452\u0402',
 u'\u0454\u0404',
 u'\u0455\u0405',
 u'\u0456\u0406',
 u'\u0458\u0408',
 u'\u0459\u0409',
 u'\u045a\u040a',
 u'\u045b\u040b',
 u'\u045f\u040f',
 u'\u0461\u0460',
 u'\u0463\u0462',
 u'\u0465\u0464',
 u'\u0467\u0466',
 u'\u0469\u0468',
 u'\u046b\u046a',
 u'\u046d\u046c',
 u'\u046f\u046e',
 u'\u0471\u0470',
 u'\u0473\u0472',
 u'\u0475\u0474',
 u'\u0479\u0478',
 u'\u047b\u047a',
 u'\u047d\u047c',
 u'\u047f\u047e',
 u'\u0481\u0480',
 u'\u0491\u0490',
 u'\u0493\u0492',
 u'\u0495\u0494',
 u'\u0497\u0496',
 u'\u0499\u0498',
 u'\u049b\u049a',
 u'\u049d\u049c',
 u'\u049f\u049e',
 u'\u04a1\u04a0',
 u'\u04a3\u04a2',
 u'\u04a5\u04a4',
 u'\u04a7\u04a6',
 u'\u04a9\u04a8',
 u'\u04ab\u04aa',
 u'\u04ad\u04ac',
 u'\u04af\u04ae',
 u'\u04b1\u04b0',
 u'\u04b3\u04b2',
 u'\u04b5\u04b4',
 u'\u04b7\u04b6',
 u'\u04b9\u04b8',
 u'\u04bb\u04ba',
 u'\u04bd\u04bc',
 u'\u04bf\u04be',
 u'\u04c4\u04c3',
 u'\u04c8\u04c7',
 u'\u04cc\u04cb',
 u'\u0561\u0531',
 u'\u0562\u0532',
 u'\u0563\u0533',
 u'\u0564\u0534',
 u'\u0565\u0535',
 u'\u0566\u0536',
 u'\u0567\u0537',
 u'\u0568\u0538',
 u'\u0569\u0539',
 u'\u056a\u053a',
 u'\u056b\u053b',
 u'\u056c\u053c',
 u'\u056d\u053d',
 u'\u056e\u053e',
 u'\u056f\u053f',
 u'\u0570\u0540',
 u'\u0571\u0541',
 u'\u0572\u0542',
 u'\u0573\u0543',
 u'\u0574\u0544',
 u'\u0575\u0545',
 u'\u0576\u0546',
 u'\u0577\u0547',
 u'\u0578\u0548',
 u'\u0579\u0549',
 u'\u057a\u054a',
 u'\u057b\u054b',
 u'\u057c\u054c',
 u'\u057d\u054d',
 u'\u057e\u054e',
 u'\u057f\u054f',
 u'\u0580\u0550',
 u'\u0581\u0551',
 u'\u0582\u0552',
 u'\u0583\u0553',
 u'\u0584\u0554',
 u'\u0585\u0555',
 u'\u0586\u0556',
 u'\u10d0\u10a0',
 u'\u10d1\u10a1',
 u'\u10d2\u10a2',
 u'\u10d3\u10a3',
 u'\u10d4\u10a4',
 u'\u10d5\u10a5',
 u'\u10d6\u10a6',
 u'\u10d7\u10a7',
 u'\u10d8\u10a8',
 u'\u10d9\u10a9',
 u'\u10da\u10aa',
 u'\u10db\u10ab',
 u'\u10dc\u10ac',
 u'\u10dd\u10ad',
 u'\u10de\u10ae',
 u'\u10df\u10af',
 u'\u10e0\u10b0',
 u'\u10e1\u10b1',
 u'\u10e2\u10b2',
 u'\u10e3\u10b3',
 u'\u10e4\u10b4',
 u'\u10e5\u10b5',
 u'\u10e6\u10b6',
 u'\u10e7\u10b7',
 u'\u10e8\u10b8',
 u'\u10e9\u10b9',
 u'\u10ea\u10ba',
 u'\u10eb\u10bb',
 u'\u10ec\u10bc',
 u'\u10ed\u10bd',
 u'\u10ee\u10be',
 u'\u10ef\u10bf',
 u'\u10f0\u10c0',
 u'\u10f1\u10c1',
 u'\u10f2\u10c2',
 u'\u10f3\u10c3',
 u'\u10f4\u10c4',
 u'\u10f5\u10c5',
 u'\u2170\u2160',
 u'\u2171\u2161',
 u'\u2172\u2162',
 u'\u2173\u2163',
 u'\u2174\u2164',
 u'\u2175\u2165',
 u'\u2176\u2166',
 u'\u2177\u2167',
 u'\u2178\u2168',
 u'\u2179\u2169',
 u'\u217a\u216a',
 u'\u217b\u216b',
 u'\u217c\u216c',
 u'\u217d\u216d',
 u'\u217e\u216e',
 u'\u217f\u216f',
 u'\uff41\uff21',
 u'\uff42\uff22',
 u'\uff43\uff23',
 u'\uff44\uff24',
 u'\uff45\uff25',
 u'\uff46\uff26',
 u'\uff47\uff27',
 u'\uff48\uff28',
 u'\uff49\uff29',
 u'\uff4a\uff2a',
 u'\uff4b\uff2b',
 u'\uff4c\uff2c',
 u'\uff4d\uff2d',
 u'\uff4e\uff2e',
 u'\uff4f\uff2f',
 u'\uff50\uff30',
 u'\uff51\uff31',
 u'\uff52\uff32',
 u'\uff53\uff33',
 u'\uff54\uff34',
 u'\uff55\uff35',
 u'\uff56\uff36',
 u'\uff57\uff37',
 u'\uff58\uff38',
 u'\uff59\uff39',
 u'\uff5a\uff3a',
 u'\uffff\x00')
HFSPLUS_CI_LOOKUP_TABLE = dict(((cu, group) for group in (HFSPLUS_CI_IGNORED,) + HFSPLUS_CI_EQUIVALENTS for cu in group))

def hfsplus_casefold(name):
    if not isinstance(name, unicode):
        raise TypeError('input must be unicode')
    result = []
    for c in name:
        if c == u'\x00':
            raise TypeError('input must not contain null bytes')
        elif c in HFSPLUS_CI_IGNORED:
            continue
        result.append(HFSPLUS_CI_LOOKUP_TABLE.get(c, c)[0])

    if name and not result:
        return HFSPLUS_CI_IGNORED[0]
    return u''.join(result)


def hfsplus_strcasecmp(a, b):
    if not isinstance(a, unicode):
        raise TypeError('input must be unicode')
    if not isinstance(b, unicode):
        raise TypeError('input must be unicode')
    if a == b:
        return 0
    lookup = lambda c: HFSPLUS_CI_LOOKUP_TABLE.get(c, c)
    len_a = len(a)
    len_b = len(b)
    i = -1
    j = -1
    while True:
        i += 1
        j += 1
        while i < len_a and a[i] in HFSPLUS_CI_IGNORED:
            i += 1

        while j < len_b and b[j] in HFSPLUS_CI_IGNORED:
            j += 1

        if i == len_a and j == len_b:
            return 0
        if i == len_a:
            return -1
        if j == len_b:
            return 1
        x = a[i]
        y = b[j]
        if x == y:
            continue
        elif lookup(x) is lookup(y):
            continue
        else:
            return cmp(lookup(x)[0], lookup(y)[0])
