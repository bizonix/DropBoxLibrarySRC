#Embedded file name: pynt/dlls/advapi32.py
from __future__ import absolute_import
from ctypes.wintypes import BOOL, DWORD, HKEY, LONG, LPCWSTR, LPWSTR, POINTER, ULONG, FILETIME
from ..types import ACCESS_MODE, EXPLICIT_ACCESSW, HCRYPTPROV, LPBYTE, LPDWORD, LPSECURITY_ATTRIBUTES, PACL, PEXPLICIT_ACCESSW, PHKEY, PSECURITY_DESCRIPTOR, REGSAM
from ..lazydll import FakeDLL, LazyDLL
from ..headers.WinNT import SECURITY_INFORMATION

class Advapi32(LazyDLL):

    def __init__(self):
        super(Advapi32, self).__init__()
        self._dllname = u'Advapi32'
        self._func_defs = {'BuildExplicitAccessWithNameW': {'restype': None,
                                          'argtypes': [POINTER(EXPLICIT_ACCESSW),
                                                       LPWSTR,
                                                       DWORD,
                                                       ACCESS_MODE,
                                                       DWORD],
                                          '__doc__': u'initializes an EXPLICIT_ACCESS structure withdata specified by the caller. The trustee isidentified by a name string.'},
         'CryptAcquireContextW': {'restype': BOOL,
                                  'argtypes': [POINTER(HCRYPTPROV),
                                               LPCWSTR,
                                               LPCWSTR,
                                               DWORD,
                                               DWORD],
                                  '__doc__': u'The CryptAcquireContext function is used to acquire ahandle to a particular key container within aparticular cryptographic service provider (CSP).This returned handle is used in calls to CryptoAPIfunctions that use the selected CSP.',
                                  'unicode': True,
                                  'when_not_found': self.return_false},
         'CryptGenRandom': {'restype': BOOL,
                            'argtypes': [HCRYPTPROV, DWORD, LPBYTE],
                            '__doc__': u'Fills a buffer with cryptographically random bytes.',
                            'unicode': False,
                            'when_not_found': self.return_false},
         'CryptReleaseContext': {'restype': BOOL,
                                 'argtypes': [HCRYPTPROV, DWORD],
                                 '__doc__': u'The CryptReleaseContext function releases the handle o fa cryptographic service provider (CSP) and a ke ycontainer. At each call to this function, the reference count on the CSP is reduced by one. When the referenc ecount reaches zero, the context is fully released and it can no longer be used by any function in the application.',
                                 'unicode': False,
                                 'when_not_found': self.return_false},
         'InitializeSecurityDescriptor': {'restype': BOOL,
                                          'argtypes': [PSECURITY_DESCRIPTOR, DWORD],
                                          '__doc__': u'Initializes a new security descriptor.',
                                          'when_not_found': self.return_false},
         'RegCloseKey': {'restype': LONG,
                         'argtypes': [HKEY],
                         '__doc__': u'Closes a handle to the specified registry key.',
                         'unicode': False,
                         'when_not_found': self.return_error_success},
         'RegCreateKeyExW': {'restype': LONG,
                             'argtypes': [HKEY,
                                          LPCWSTR,
                                          DWORD,
                                          LPWSTR,
                                          DWORD,
                                          REGSAM,
                                          LPSECURITY_ATTRIBUTES,
                                          PHKEY,
                                          LPDWORD],
                             '__doc__': u'Creates the specified registry key. If the key already exists, the function opens it. Note that key names are notcase sensitive.',
                             'when_not_found': self.return_error_not_found},
         'RegDeleteTreeW': {'restype': LONG,
                            'argtypes': [HKEY, LPCWSTR],
                            '__doc__': u'Deletes the subkeys and values of the specified key recursively.',
                            'unicode': True,
                            'when_not_found': self.return_error_not_found},
         'RegDeleteKeyW': {'restype': LONG,
                           'argtypes': [HKEY, LPCWSTR],
                           '__doc__': u'Deletes a subkey and its values. Note that key names are not case sensitive.',
                           'unicode': True,
                           'when_not_found': self.return_error_not_found},
         'RegDeleteValueW': {'restype': LONG,
                             'argtypes': [HKEY, LPCWSTR],
                             '__doc__': u'Removes a named value from the specified registry key. Notethat value names are not case sensitive.',
                             'unicode': True,
                             'when_not_found': self.return_error_not_found},
         'RegEnumValueW': {'restype': LONG,
                           'argtypes': [HKEY,
                                        DWORD,
                                        LPCWSTR,
                                        LPDWORD,
                                        LPDWORD,
                                        LPDWORD,
                                        LPBYTE,
                                        LPDWORD],
                           '__doc__': u'Enumerates the values for the specified open registry key. The function copies one indexed value name and data block for the key each time it is called.',
                           'unicode': True,
                           'when_not_found': self.return_error_not_found},
         'RegEnumKeyExW': {'restype': LONG,
                           'argtypes': [HKEY,
                                        DWORD,
                                        LPCWSTR,
                                        LPDWORD,
                                        LPDWORD,
                                        LPCWSTR,
                                        LPDWORD,
                                        POINTER(FILETIME)],
                           'unicode': True,
                           'when_not_found': self.return_error_not_found},
         'RegOpenKeyExW': {'restype': LONG,
                           'argtypes': [HKEY,
                                        LPCWSTR,
                                        DWORD,
                                        REGSAM,
                                        PHKEY],
                           '__doc__': u'Opens the specified registry key. Note that key names are not case sensitive.',
                           'unicode': True,
                           'when_not_found': self.return_error_not_found},
         'RegQueryValueExW': {'restype': LONG,
                              'argtypes': [HKEY,
                                           LPCWSTR,
                                           LPDWORD,
                                           LPDWORD,
                                           LPBYTE,
                                           LPDWORD],
                              '__doc__': u'Retrieves the type and data for the specified value nameassociated with an open registry key.',
                              'unicode': True,
                              'when_not_found': self.return_error_not_found},
         'RegSetValueExW': {'restype': LONG,
                            'argtypes': [HKEY,
                                         LPCWSTR,
                                         DWORD,
                                         DWORD,
                                         LPBYTE,
                                         DWORD],
                            '__doc__': u'Sets the data and type of a specified value under a registrykey.',
                            'when_not_found': self.return_error_not_found},
         'SetEntriesInAclW': {'restype': DWORD,
                              'argtypes': [ULONG,
                                           PEXPLICIT_ACCESSW,
                                           PACL,
                                           POINTER(PACL)],
                              '__doc__': u'The SetEntriesInAcl function creates a new access controllist (ACL) by merging new access control or audit controlinformation into an existing ACL structure.',
                              'when_not_found': self.return_error_invalid_parameter},
         'SetSecurityDescriptorDacl': {'restype': BOOL,
                                       'argtypes': [PSECURITY_DESCRIPTOR,
                                                    BOOL,
                                                    PACL,
                                                    BOOL],
                                       '__doc__': u'The SetSecurityDescriptorDacl function sets information in a discretionary access control list (DACL). If a DACL is already present in the security descriptor, the DACL is replaced.',
                                       'when_not_found': self.return_false}}
        self.F('GetFileSecurityW', BOOL, [(LPCWSTR, 'lpFileName'),
         (SECURITY_INFORMATION, 'RequestedInformation'),
         (PSECURITY_DESCRIPTOR, 'pSecurityDescriptor'),
         (DWORD, 'nLength'),
         (LPDWORD, 'lpnLengthNeeded')], self.return_false, doc=u'The GetFileSecurity function obtains specified ' + u'information about the security of a file or directory. ' + u"The information obtained is constrained by the caller's " + u'access rights and privileges.')
        self.F('SetFileSecurityW', BOOL, [(LPCWSTR, 'lpFileName'), (SECURITY_INFORMATION, 'SecurityInformation'), (PSECURITY_DESCRIPTOR, 'pSecurityDescriptor')], self.return_false, doc=u'The SetFileSecurity function sets the security of a file or directory object.')


advapi32 = FakeDLL(Advapi32)
